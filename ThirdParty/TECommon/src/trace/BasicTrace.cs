//////////////////////////////////////////////////////////////////////
//
// Copyright (c) 2003-2004, Andrew S. Townley
// All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 
//     * Redistributions of source code must retain the above
//     copyright notice, this list of conditions and the following
//     disclaimer.
// 
//     * Redistributions in binary form must reproduce the above
//     copyright notice, this list of conditions and the following
//     disclaimer in the documentation and/or other materials provided
//     with the distribution.
// 
//     * Neither the names Andrew Townley and Townley Enterprises,
//     Inc. nor the names of its contributors may be used to endorse
//     or promote products derived from this software without specific
//     prior written permission.  
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
// FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
// COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
// OF THE POSSIBILITY OF SUCH DAMAGE.
//
// Name:	BasicTrace.cs
// Created:	Sat Jun 26 17:31:05 IST 2004
//
///////////////////////////////////////////////////////////////////////

using System;

namespace TownleyEnterprises.Trace {

//////////////////////////////////////////////////////////////////////
/// <summary>
///   <para>
///   This class implements a proposal by Phil Hourihane (one of my
///   colleagues at Meridian) as a compromise to still have the
///   tracing capabilities while reducing the number of lines of code
///   required to provide complete (or mostly complet) coverage of the
///   exits from methods expected to throw exceptions.
///   </para>
///   <para>
///   After using this version in production code, it does in fact
///   meet most of the requirements, but it still doesn't give you as
///   much information in the trace logs when something goes wrong as
///   using full instrumentation using the ErrorTrace class.  Like
///   most things, it is a tradeoff between information and time to
///   write the method implementations.
///   </para>
/// </summary>
/// <remarks>
///   <para>
///   To use this class to instrument a class, the following pattern
///   should be applied.  Each method in the class should have similar
///   code to the following and a single, static trace instance should
///   be created for the class.
///   </para>
/// <example>
/// <code>
/// class MyClass
/// {
/// 	// create a shared instance and give it a trace threshold of 0
/// 	private static BasicTrace _trace = new BasicTrace("MyClass", 0)
/// 	...
/// 
/// 	// define the names of the parameters as static so they aren't
/// 	// created each time you need them.
/// 	private static readonly string[] _myMethodParams = 
/// 			new string[] {"param1", "param2" };
/// 
/// 	public int MyMethod(string param1, int param2)
/// 	{
/// 		_trace.MethodStart("MyMethod", _myMethodParams,
/// 			param1, param2);
/// 		
/// 		int rc = 0;
/// 		try
/// 		{
/// 			// still log any exceptions generated by me
/// 			if(_somethingBad)
/// 			{
/// 				throw (Exception)_trace.MethodThrow(new
/// 					Exeption("I have a bad feeling about this."));
/// 			}
/// 
/// 			// normal method body
/// 			...
/// 			return _trace.MethodReturn(rc);
/// 		}
/// 		finally
/// 		{
/// 			_trace.MethodExit();
/// 		}
/// 	}
/// }
/// </code>
/// </example>
///   <para>
///   The idea here is that you still get the entry and exit in the
///   normal case, but you don't have to attempt to check for all the
///   possible exceptions which can be thrown (and upset the method
///   name stack of the MethodTrace class).
///   </para>
/// </remarks>
/// <version>$Id: BasicTrace.cs,v 1.3 2004/07/19 16:50:28 atownley Exp $</version>
/// <author>Phil Hourihane (API specification)</author>
/// <author><a href="mailto:adz1092@netscape.net">Andrew S. Townley</a></author>
//////////////////////////////////////////////////////////////////////

public class BasicTrace: MethodTrace
{
	//////////////////////////////////////////////////////////////
	/// <summary>
	///   Initializes the TraceCore instance.
	/// </summary>
	/// <param name="name">the identifier to be printed in the
	/// trace logs</param>
	//////////////////////////////////////////////////////////////

	public BasicTrace(string name) :base(name, 0)
	{
	}

	//////////////////////////////////////////////////////////////
	/// <summary>
	///   Initializes the TraceCore instance using the specified
	///   maturity.
	/// </summary>
	/// <param name="name">the identifier to be printed in the
	/// trace logs</param>
	/// <param name="maturity">the relative maturity of this class
	/// (see the TraceCore documentation for a complete
	/// explaination)</param>
	//////////////////////////////////////////////////////////////

	public BasicTrace(String name, int maturity)
		: base(name, maturity)
	{
	}

	//////////////////////////////////////////////////////////////
	/// <summary>
	///   This constructor also sets the threshold when the method
	///   information will be printed (overriding the default
	///   value of 1).
	/// </summary>
	/// <param name="name">the identifier to be printed in the
	/// trace logs</param>
	/// <param name="maturity">the relative maturity of this class
	/// (see the TraceCore documentation for a complete
	/// explaination)</param>
	/// <param name="threshold">the default threshold</param>
	//////////////////////////////////////////////////////////////

	public BasicTrace(String name, int maturity, int threshold)
		: base(name, maturity, threshold)
	{
		_mt = threshold;
	}

	//////////////////////////////////////////////////////////////
	/// <summary>
	///   This method should be called to indicate a normal exit
	///   from the method (either as a result of an exception, or
	///   as a result of no exceptions being thrown.  It
	///   <b>must</b> be included in every method call.
	/// </summary>
	//////////////////////////////////////////////////////////////

	public virtual void MethodExit()
	{
		object[] arr = { PopCurrentMethod() };
		WriteLine(_mt, TRACE_EXIT_FMT, arr);
	}

	private int _mt = 1;

	/** This method indicates a normal trace return */
	public static readonly string TRACE_EXIT_FMT = "{0}() exiting.";
}

}
